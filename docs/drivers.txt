Creating Lambda OS drivers

*** Intro ***

This document will help you get started with creating a very basic driver. This will provide you with some sample code and explain all of it to you.

*** Example Code ***

#include <lambda/drv.h> // DRIVER_*
#include <lambda/msg.h> // kmsg

DRIVER_TYPE(DRV_LOOP);
DRIVER_NAME("test");

DRIVER_START_FUNCTION(drv_start);
DRIVER_EXIT_FUNCTION(drv_stop);
DRIVER_LOOP_FUNCTION(drv_loop);

int drv_start()
{
	kmsg("Test driver has started");
	return DRIVER_SUCCESS;
}

int drv_stop()
{
	kmsg("Test driver is stopping");
	return DRIVER_SUCCESS;
}

int drv_loop()
{
	// Do something
	return DRIVER_SUCCESS; // Will reinitiate loop
}

*** Code Explanation ***

#include <lambda/drv.h>
	This includes a header defining things related to drivers. It defines every preprocessor directive starting with `DRIVER_`. These insert driver information in the resulting executable.

#include <lambda/msg.h>
	This includes a header containing various function definitions, including kmsg.

DRIVER_TYPE(DRV_LOOP);
	This tells the driver loader that this is a driver that has a start and exit functions that both exit, and a loop function that continually gets called unless it returns DRIVER_FAILURE of DRIVER_STOP.

DRIVER_NAME("test");
	This sets the name of the driver. All-lowercase names are preferred, if you want this to be an official driver, it MUST be all lowercase.

DRIVER_START_FUNCTION(drv_start);
	Tell the driver loader what function is the starting function.

DRIVER_EXIT_FUNCTION(drv_stop);
	Tell the driver loader what function to call when stopping the driver.

DRIVER_LOOP_FUNCTION(drv_loop);
	Tell the driver loader what function contains the loop. This is only applicable when DRIVER_TYPE(DRV_LOOP) is used.

int drv_start()
	kmsg("Test driver has started");
		Send a message to the kernel to be printed to the kernel log
	return DRIVER_SUCCESS;
		Tell the kernel that the driver was correctly loaded

int drv_stop()
	return DRIVER_SUCCESS;
		Tell the kernel that the driver has successfuly stopped

int drv_loop()
	return DRIVER_SUCCESS;
		Tell the kernel to keep looping
