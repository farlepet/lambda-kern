Lambda OS syscalls


*** How it works ***

	When you want to call a system function, you must use a syscall. A syscall
is called using an interrupt. That interrupt in turn calls a function that
finds the syscall and then calls the function using the given arguments.

-- How to call a syscall --

	Before issuing the syscall, you must give it some arguments, through
the `eax` and `ebx` registers.

+----------+-------------------------------+
| register | value                         |
+==========+===============================+
| eax      | Syscall number                |
| ebx      | Pointer to array of arguments |
+----------+-------------------------------+
		The values of the registers


	As of the the writing of this document, you need AT LEAST 1 index in the
argument array, for the return value. For compatibility with possible future
additions, please make sure there are at least 4 indexes in the array. After
you have given the registers the correct values, you must issue an
interrupt: `int 0xFF` After that, the OS will take care of the rest.

-- What to do after a syscall --

+-------+--------------+
| index | value        |
+=======+==============+
| 0     | return value |
+-------+--------------+
	Values in argument
	array after return


	After the syscall has returned, you may want to receive the return value
of the called functions. The return value is stored in index 0 of the argument
array.


*** Syscall List ***

+-----+-------------+-----------------+
| num | kernel name | function        |
+=====+=============+=================+
| 00  | GET_KTASK   | Get Kernel Task |
| 01  | SEND_MSG    | Send Message    |
| 02  | RECV_MSG    | Receive Message |
+-----+-------------+-----------------+


*** Syscall details ***

-- Get Kernel Task (GET_KTASK) --

	Definition:
		Gets the pid of one of the Kernel Tasks, and returns it.

	Arguments:
		Kernel task number:
			Number of the requested kernel task
			Integer
		Time to wait:
			Time in milliseconds to wait for the task to start (0 == inf)
				Should not need to be used in user programs.
			Unsigned Integer

-- Send Message (SEND_MSG) --

	Definition:
		Sends a message to the specified process.
	
	Arguments:
		Destination:
			PID of the process to be sent the message.
			Integer
		Message:
			Pointer to the message to be sent.
			Pointer
		Size:
			Size of the message to be sent.
			Integer

-- Receive Message (RECV_MSG) --

	Definition:
		Receive a message sent to this process.
	
	Arguments:
		Message:
			Pointer to memory region in which to place the message.
			Pointer
		Size:
			Size of the message to receive.
			Integer
